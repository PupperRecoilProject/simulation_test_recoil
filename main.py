# main.py
import sys
import numpy as np
from config import load_config
from state import SimulationState
from simulation import Simulation
from policy import ONNXPolicy
from observation import ObservationBuilder
from rendering import DebugOverlay
from keyboard_input_handler import KeyboardInputHandler
from xbox_input_handler import XboxInputHandler # <--- ÊÅ¢Âæ©Â∞éÂÖ•

def main():
    """‰∏ªÁ®ãÂºèÂÖ•Âè£ÔºöÂàùÂßãÂåñÊâÄÊúâÁµÑ‰ª∂‰∏¶ÈÅãË°åÊ®°Êì¨Ëø¥Âúà„ÄÇ"""
    print("\n--- Ê©üÂô®‰∫∫Ê®°Êì¨ÊéßÂà∂Âô® (Â§öËº∏ÂÖ•Ê®°ÂºèÁâà) ---")

    config = load_config()
    state = SimulationState(config)
    sim = Simulation(config)
    
    # --- ÊÅ¢Âæ©Ê≠£Â∏∏ÂàùÂßãÂåñÊµÅÁ®ã ---
    keyboard_handler = KeyboardInputHandler(state)
    sim.register_callbacks(keyboard_handler)
    
    xbox_handler = XboxInputHandler(state) # <--- ÊÅ¢Âæ©

    if xbox_handler.is_available():
        state.toggle_input_mode("GAMEPAD") # <--- ÊÅ¢Âæ©
        print("üéÆ ÊêñÊ°øÂ∑≤Â∞±Á∑íÔºåÈ†êË®≠ÁÇ∫ÊêñÊ°øÊéßÂà∂Ê®°Âºè„ÄÇÊåâ 'M' ÈçµÂàáÊèõÂõûÈçµÁõ§„ÄÇ")
    else:
        print("‚ö†Ô∏è Êú™ÂÅµÊ∏¨Âà∞ÊêñÊ°øÔºåÂ∞á‰ΩøÁî®ÈçµÁõ§ÊéßÂà∂Ê®°Âºè„ÄÇ")
    # --- ÊÅ¢Âæ©ÁµêÊùü ---
    
    try:
        policy = ONNXPolicy(config, 1)
        model_input_dim = policy.model_input_dim
    except Exception as e:
        sys.exit(f"‚ùå Á≠ñÁï•ÂàùÂßãÂåñÂ§±Êïó: {e}")
    
    if model_input_dim not in config.observation_recipes:
        sys.exit(f"‚ùå ÈåØË™§: Âú® config.yaml ‰∏≠Êâæ‰∏çÂà∞ÈÅ©Áî®ÊñºÁ∂≠Â∫¶ {model_input_dim} ÁöÑËßÄÂØüÈÖçÊñπ„ÄÇ")
    recipe = config.observation_recipes[model_input_dim]
    print(f"üîç ÊâæÂà∞ÂåπÈÖçÈÖçÊñπ! ‰ΩøÁî®‰ª•‰∏ãÂÖÉ‰ª∂Âª∫ÊßãËßÄÂØüÂêëÈáè:\n -> {recipe}")

    temp_obs_builder = ObservationBuilder(recipe, sim.data, sim.model, sim.torso_id, sim.default_pose, config)
    dummy_obs = temp_obs_builder.get_observation(np.zeros(3), np.zeros(config.num_motors))
    base_obs_dim = len(dummy_obs)
    del temp_obs_builder
    del policy

    policy = ONNXPolicy(config, base_obs_dim)
    obs_builder = ObservationBuilder(recipe, sim.data, sim.model, sim.torso_id, sim.default_pose, config)

    ALL_OBS_DIMS = {'z_angular_velocity':1, 'gravity_vector':3, 'commands':3, 'joint_positions':12, 'joint_velocities':12, 'foot_contact_states':4, 'linear_velocity':3, 'angular_velocity':3, 'last_action':12, 'phase_signal':1}
    used_dims = {k: ALL_OBS_DIMS[k] for k in recipe if k in ALL_OBS_DIMS}
    overlay = DebugOverlay(recipe, used_dims)

    def reset_all():
        print("\n--- Ê≠£Âú®ÈáçÁΩÆÊ®°Êì¨ ---")
        sim.reset()
        policy.reset()
        state.reset_control_state(sim.data.time)
        state.clear_command()

    reset_all()
    print("\n--- Ê®°Êì¨ÈñãÂßã ---")

    while not sim.should_close():
        if state.input_mode == "GAMEPAD":
            xbox_handler.update_state() # <--- ÊÅ¢Âæ©

        if state.reset_requested:
            reset_all()

        sim_time = sim.data.time
        if state.control_timer <= sim_time:
            if sim_time < config.warmup_duration:
                state.sim_mode_text = "Warmup"
                action_raw, onnx_input = np.zeros(config.num_motors), np.array([])
            else:
                state.sim_mode_text = "ONNX Control"
                base_obs = obs_builder.get_observation(state.command, policy.last_action)
                onnx_input, action_raw = policy.get_action(base_obs)
            
            final_ctrl = sim.default_pose + action_raw * state.tuning_params.action_scale
            sim.apply_control(final_ctrl, state.tuning_params)

            state.latest_onnx_input = onnx_input.flatten()
            state.latest_action_raw, state.latest_final_ctrl = action_raw, final_ctrl
            state.control_timer += config.control_dt

        sim.step(state)
        sim.render(state, overlay)

    sim.close()
    xbox_handler.close() # <--- ÊÅ¢Âæ©
    print("\nÊ®°Êì¨ÁµêÊùüÔºåÁ®ãÂºèÈÄÄÂá∫„ÄÇ")

if __name__ == "__main__":
    main()